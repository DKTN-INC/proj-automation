[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "proj-automation"
version = "0.1.0"
description = "Project Automation - Discord Bot + CI/CD for team collaboration"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Project Automation Team"}
]
keywords = ["discord", "bot", "automation", "ci-cd", "pdf", "markdown"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "markdown>=3.5.0",
    "Jinja2>=3.1.0",
    "weasyprint>=59.0",
    "pdfkit>=1.0.0",
    "pymdown-extensions>=10.0.0",
    "discord.py>=2.3.0",
    "python-dotenv>=1.0.0",
    "openai>=1.50.0",
    "tiktoken>=0.5.0",
    "Pillow>=10.0.0",
    "pytesseract>=0.3.10",
    "pydub>=0.25.1",
    "aiosqlite>=0.19.0",
    "PyGithub>=1.59.0",
    "beautifulsoup4>=4.12.0",
    "aiohttp>=3.8.0",
    "python-magic>=0.4.27",
    "python-dateutil>=2.8.0",
    "opencv-python-headless>=4.8.0",
    "aiofiles>=23.0.0",
    "requests>=2.31.0",
    "colorama>=0.4.6",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.8.0",
    "types-colorama>=0.4.0",
]

[project.urls]
Homepage = "https://github.com/dktn7/proj-automation"
Repository = "https://github.com/dktn7/proj-automation.git"
Issues = "https://github.com/dktn7/proj-automation/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["bot*", "scripts*"]
exclude = ["tests*"]

# Ruff configuration (linting and formatting)
[tool.ruff]
line-length = 88
target-version = "py38"
extend-exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    ".venv",
    "venv",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "ARG001", # unused function argument (common in callbacks)
    "ARG002", # unused method argument (common in overrides)
]

[tool.ruff.lint.per-file-ignores]
"scripts/*.py" = ["B008"]  # Allow function calls in argument defaults for CLI scripts
"bot/main.py" = ["B008"]   # Allow function calls in argument defaults for Discord commands
"test_*.py" = ["ARG001", "ARG002"]  # Allow unused arguments in tests
"tests/*.py" = ["ARG001", "ARG002"]  # Allow unused arguments in tests

[tool.ruff.lint.isort]
known-first-party = ["bot", "scripts"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Black configuration for consistency
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "discord.*",
    "aiohttp.*",
    "aiosqlite.*",
    "weasyprint.*",
    "pdfkit.*",
    "pytesseract.*",
    "cv2.*",
    "PIL.*",
    "pydub.*",
    "github.*",
    "bs4.*",
    "magic.*",
    "openai.*",
    "tiktoken.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=bot",
    "--cov=scripts",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["bot", "scripts"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "demo_bot_features.py",
    "setup_bot.py",
    "test_reliability.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_test (common in scripts)