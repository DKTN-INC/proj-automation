name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      fail_on_missing_weasy:
        description: 'If true, run the WeasyPrint fail-fast native libs check on ubuntu-latest'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: "3.11" # Updated to a stable release
  # Toggleable flag to enable a fail-fast WeasyPrint native libs check
  FAIL_ON_MISSING_WEASY: "false"
  # Toggleable flag to enable secret presence enforcement in CI
  ENFORCE_SECRET_PRESENCE: "true"

jobs:
  # Optional check that required secrets are present before running CI heavy jobs
  secret-presence-check:
    # Run only when ENFORCE_SECRET_PRESENCE is true and skip enforcement for forked pull requests
    if: "${{ github.event.inputs.ENFORCE_SECRET_PRESENCE == 'true' }} && !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check required secrets are present
        run: |
          missing=()
          if [ -z "${{ secrets.BOT_TOKEN }}" ]; then
            echo "BOT_TOKEN is missing"
            missing+=(BOT_TOKEN)
          fi
          # If S3 uploads are used in your workflow, ensure required AWS secrets exist
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "AWS credentials missing (optional unless using S3 presigned uploads)"
          fi
          if [ ${#missing[@]} -ne 0 ]; then
            echo "Required secrets missing: ${missing[*]}"
            exit 1
          fi

  # Optional fail-fast job: checks WeasyPrint native runtime on ubuntu-latest
  weasyprint-check:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies for WeasyPrint
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libpango-1.0-0 libgdk-pixbuf2.0-0 libpangocairo-1.0-0 libcairo2

      - name: Install Python requirements
        run: python -m pip install --upgrade pip; pip install -r requirements.txt

      - name: Fail-fast WeasyPrint check
        run: |
          python scripts/check_native_deps.py --fail-on-missing

  lint-and-format:
    if: false
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Ruff linting
        run: |
          ruff check . --output-format=github

      - name: Run Ruff formatting check
        run: |
          ruff format --check .

      - name: Run MyPy type checking
        run: |
          mypy --config-file=pyproject.toml bot/ scripts/ || true
        continue-on-error: true  # Don't fail CI on type errors initially

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2-dev \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf2.0-0 \
            libffi-dev \
            shared-mime-info \
            fonts-dejavu-core

      - name: Install WeasyPrint runtime libs on Windows (best-effort)
        if: false
        shell: pwsh
        run: |
          # Disabled in CI: WeasyPrint native runtime install is not required for PR checks
          Write-Host "Skipping WeasyPrint native libs installation in CI"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Check native dependencies (diagnostic)
        run: |
          python scripts/check_native_deps.py || true

      - name: Run pytest
        run: |
          pytest tests/ -v --tb=short --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run bandit security scan
        run: |
          bandit -r bot/ scripts/ -f json -o bandit-report.json || true
          bandit -r bot/ scripts/ --severity-level medium || true
        continue-on-error: true  # Don't fail CI on security warnings initially

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  build-check:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2-dev \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf2.0-0 \
            libffi-dev \
            shared-mime-info \
            fonts-dejavu-core \
            wkhtmltopdf \
            tesseract-ocr

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Test markdown processing
        run: |
          # Test that markdown processor can be imported and run
          python -c "
          import sys
          from pathlib import Path
          sys.path.insert(0, str(Path('scripts')))
          import markdown_processor
          print('✅ Markdown processor imported successfully')
          "

      - name: Test sample idea sheet processing
        run: |
          if [ -f "docs/ideasheets/sample_idea.md" ]; then
            mkdir -p test_output
            python scripts/markdown_processor.py docs/ideasheets/sample_idea.md -o test_output/ || echo "⚠️ Markdown processing failed but continuing"
            echo "✅ Sample processing test completed"
          else
            echo "ℹ️ No sample idea sheet found, skipping processing test"
          fi

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security, build-check]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" &&
                "${{ needs.test.result }}" == "success" &&
                "${{ needs.security.result }}" == "success" &&
                "${{ needs.build-check.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Some checks failed:"
            echo "  Lint and Format: ${{ needs.lint-and-format.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Security: ${{ needs.security.result }}"
            echo "  Build Check: ${{ needs.build-check.result }}"
            exit 1
          fi

# Minor change to refresh GitHub Actions cache
