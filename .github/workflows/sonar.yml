name: SonarCloud Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

jobs:
  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Ensure SONAR_TOKEN is present
        run: |
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "Required secret SONAR_TOKEN is missing. Set it in repository settings -> Secrets." >&2
            exit 1
          else
            echo "SONAR_TOKEN found"
          fi

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Python dependencies and test tools
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt || true; fi
          python -m pip install pytest pytest-cov

      - name: Run tests and generate coverage
        run: |
          # Generate coverage.xml for SonarCloud
          pytest --maxfail=1 --disable-warnings -q --cov=. --cov-report=xml:coverage.xml || true

      - name: Cache Sonar scanner
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/pom.xml', '**/build.gradle', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-sonar-

      - name: Download SonarScanner CLI
        run: |
          # Use a stable scanner version compatible with SonarCloud
          SCANNER_VERSION=4.8.1.3023
          SCANNER_ZIP="sonar-scanner-cli-${SCANNER_VERSION}-linux.zip"
          curl -sSLo "$SCANNER_ZIP" "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/${SCANNER_ZIP}"
          unzip -q "$SCANNER_ZIP"
          SCANNER_DIR="sonar-scanner-${SCANNER_VERSION}-linux"
          # remove any bundled JRE shipped with the scanner to force use of the runner's JDK
          if [ -d "$SCANNER_DIR/jre" ]; then
            rm -rf "$SCANNER_DIR/jre"
          fi
          # export scanner location for subsequent steps
          echo "SONAR_SCANNER_HOME=$PWD/$SCANNER_DIR" >> $GITHUB_ENV
          echo "$PWD/$SCANNER_DIR/bin" >> $GITHUB_PATH

      - name: Run SonarScanner CLI
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -o pipefail
          echo "== java diagnostics =="
          which java || true
          java -version || true
          echo "JAVA_HOME=$JAVA_HOME"
          echo "SONAR_SCANNER_HOME=$SONAR_SCANNER_HOME"
          sonar-scanner \
            -X \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=. \
            -Dsonar.tests=tests \
            -Dsonar.test.inclusions=tests/** \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Upload Sonar report (optional)
        if: always()
        run: echo "Sonar scan completed. Check SonarCloud/SonarQube UI for results."
