#!/usr/bin/env python3
"""
Markdown to PDF Converter
Converts Markdown files to PDFs using pdfkit and wkhtmltopdf
"""

import sys
import argparse
import markdown
import pdfkit
from pathlib import Path
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def markdown_to_html(md_content, title="Document"):
    """Convert markdown content to HTML with styling."""

    # HTML template with basic styling
    html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
            color: #333;
        }}
        h1, h2, h3, h4, h5, h6 {{
            color: #2c3e50;
            margin-top: 30px;
            margin-bottom: 15px;
        }}
        h1 {{
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            border-bottom: 1px solid #bdc3c7;
            padding-bottom: 5px;
        }}
        code {{
            background-color: #f8f9fa;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        }}
        pre {{
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            border-left: 4px solid #3498db;
            overflow-x: auto;
        }}
        pre code {{
            background-color: transparent;
            padding: 0;
        }}
        blockquote {{
            margin: 0;
            padding: 10px 20px;
            background-color: #f8f9fa;
            border-left: 4px solid #3498db;
            font-style: italic;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
            font-weight: bold;
        }}
        ul, ol {{
            margin: 15px 0;
            padding-left: 30px;
        }}
        li {{
            margin: 5px 0;
        }}
        a {{
            color: #3498db;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
        .metadata {{
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            font-size: 0.9em;
        }}
        .footer {{
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #bdc3c7;
            text-align: center;
            font-size: 0.8em;
            color: #7f8c8d;
        }}
    </style>
</head>
<body>
    <div class="metadata">
        <strong>Generated:</strong> {timestamp}<br>
        <strong>Source:</strong> {source_file}
    </div>
    {content}
    <div class="footer">
        Generated by Project Automation Platform
    </div>
</body>
</html>
"""

    # Configure markdown extensions
    md = markdown.Markdown(
        extensions=[
            "extra",  # Tables, footnotes, etc.
            "codehilite",  # Code syntax highlighting
            "toc",  # Table of contents
            "sane_lists",  # Better list handling
        ]
    )

    # Convert markdown to HTML
    html_content = md.convert(md_content)

    # Get current timestamp
    from datetime import datetime

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Fill in the template
    return html_template.format(
        title=title, content=html_content, timestamp=timestamp, source_file=title
    )


def convert_md_to_pdf(md_file_path, output_dir=None, custom_options=None):
    """
    Convert a Markdown file to PDF.

    Args:
        md_file_path (str): Path to the markdown file
        output_dir (str): Output directory for PDF (default: same as input)
        custom_options (dict): Custom wkhtmltopdf options

    Returns:
        str: Path to the generated PDF file
    """
    md_path = Path(md_file_path)

    if not md_path.exists():
        raise FileNotFoundError(f"Markdown file not found: {md_file_path}")

    # Read markdown content
    with open(md_path, "r", encoding="utf-8") as f:
        md_content = f.read()

    # Determine output path
    if output_dir:
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        pdf_path = output_path / f"{md_path.stem}.pdf"
    else:
        pdf_path = md_path.parent / f"{md_path.stem}.pdf"

    # Convert to HTML
    title = md_path.stem.replace("_", " ").replace("-", " ").title()
    html_content = markdown_to_html(md_content, title)

    # wkhtmltopdf options
    options = {
        "page-size": "A4",
        "margin-top": "0.75in",
        "margin-right": "0.75in",
        "margin-bottom": "0.75in",
        "margin-left": "0.75in",
        "encoding": "UTF-8",
        "no-outline": None,
        "enable-local-file-access": None,
    }

    # Update with custom options if provided
    if custom_options:
        options.update(custom_options)

    try:
        # Convert HTML to PDF
        pdfkit.from_string(html_content, str(pdf_path), options=options)
        logger.info(f"Successfully converted {md_path.name} to {pdf_path}")
        return str(pdf_path)

    except Exception as e:
        logger.error(f"Error converting {md_path.name} to PDF: {e}")
        raise


def convert_directory(input_dir, output_dir=None, pattern="*.md"):
    """
    Convert all Markdown files in a directory to PDFs.

    Args:
        input_dir (str): Input directory containing markdown files
        output_dir (str): Output directory for PDFs
        pattern (str): File pattern to match (default: "*.md")

    Returns:
        list: Paths to generated PDF files
    """
    input_path = Path(input_dir)

    if not input_path.exists():
        raise FileNotFoundError(f"Input directory not found: {input_dir}")

    # Find all markdown files
    md_files = list(input_path.glob(pattern))

    if not md_files:
        logger.warning(
            f"No markdown files found in {input_dir} matching pattern {pattern}"
        )
        return []

    pdf_files = []

    for md_file in md_files:
        try:
            pdf_path = convert_md_to_pdf(str(md_file), output_dir)
            pdf_files.append(pdf_path)
        except Exception as e:
            logger.error(f"Failed to convert {md_file}: {e}")

    logger.info(f"Converted {len(pdf_files)} out of {len(md_files)} markdown files")
    return pdf_files


def main():
    """Main CLI function."""
    parser = argparse.ArgumentParser(description="Convert Markdown files to PDF")
    parser.add_argument("input", help="Input markdown file or directory")
    parser.add_argument("-o", "--output", help="Output directory for PDFs")
    parser.add_argument(
        "--pattern",
        default="*.md",
        help="File pattern for directory mode (default: *.md)",
    )
    parser.add_argument("--verbose", "-v", action="store_true", help="Verbose output")

    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    input_path = Path(args.input)

    try:
        if input_path.is_file():
            # Convert single file
            pdf_path = convert_md_to_pdf(args.input, args.output)
            print(f"Generated: {pdf_path}")
        elif input_path.is_dir():
            # Convert directory
            pdf_files = convert_directory(args.input, args.output, args.pattern)
            print(f"Generated {len(pdf_files)} PDF files:")
            for pdf_file in pdf_files:
                print(f"  - {pdf_file}")
        else:
            print(f"Error: {args.input} is not a valid file or directory")
            sys.exit(1)

    except Exception as e:
        logger.error(f"Conversion failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
